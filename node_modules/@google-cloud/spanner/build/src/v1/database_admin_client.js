"use strict";
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseAdminClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/database_admin_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./database_admin_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Cloud Spanner Database Admin API
 *
 *  The Cloud Spanner Database Admin API can be used to:
 *    * create, drop, and list databases
 *    * update the schema of pre-existing databases
 *    * create, delete, copy and list backups for a database
 *    * restore a database from an existing backup
 * @class
 * @memberof v1
 */
class DatabaseAdminClient {
    /**
     * Construct an instance of DatabaseAdminClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DatabaseAdminClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b, _c, _d, _e;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';
        this._servicePath = 'spanner.' + this._universeDomain;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};
        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            backupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/backups/{backup}'),
            backupSchedulePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/databases/{database}/backupSchedules/{schedule}'),
            cryptoKeyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}'),
            databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/databases/{database}'),
            databaseRolePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/databases/{database}/databaseRoles/{role}'),
            instancePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listDatabases: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'databases'),
            listBackups: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backups'),
            listDatabaseOperations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'operations'),
            listBackupOperations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'operations'),
            listDatabaseRoles: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'databaseRoles'),
            listBackupSchedules: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backupSchedules'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/instances/*/databases/*/operations/*}:cancel',
                    additional_bindings: [
                        { post: '/v1/{name=projects/*/instances/*/operations/*}:cancel' },
                        {
                            post: '/v1/{name=projects/*/instances/*/backups/*/operations/*}:cancel',
                        },
                        {
                            post: '/v1/{name=projects/*/instanceConfigs/*/operations/*}:cancel',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/instances/*/databases/*/operations/*}',
                    additional_bindings: [
                        { delete: '/v1/{name=projects/*/instances/*/operations/*}' },
                        {
                            delete: '/v1/{name=projects/*/instances/*/backups/*/operations/*}',
                        },
                        { delete: '/v1/{name=projects/*/instanceConfigs/*/operations/*}' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/instances/*/databases/*/operations/*}',
                    additional_bindings: [
                        { get: '/v1/{name=projects/*/instances/*/operations/*}' },
                        { get: '/v1/{name=projects/*/instances/*/backups/*/operations/*}' },
                        { get: '/v1/{name=projects/*/instanceConfigs/*/operations/*}' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/instances/*/databases/*/operations}',
                    additional_bindings: [
                        { get: '/v1/{name=projects/*/instances/*/operations}' },
                        { get: '/v1/{name=projects/*/instances/*/backups/*/operations}' },
                        { get: '/v1/{name=projects/*/instanceConfigs/*/operations}' },
                    ],
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createDatabaseResponse = protoFilesRoot.lookup('.google.spanner.admin.database.v1.Database');
        const createDatabaseMetadata = protoFilesRoot.lookup('.google.spanner.admin.database.v1.CreateDatabaseMetadata');
        const updateDatabaseResponse = protoFilesRoot.lookup('.google.spanner.admin.database.v1.Database');
        const updateDatabaseMetadata = protoFilesRoot.lookup('.google.spanner.admin.database.v1.UpdateDatabaseMetadata');
        const updateDatabaseDdlResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const updateDatabaseDdlMetadata = protoFilesRoot.lookup('.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata');
        const createBackupResponse = protoFilesRoot.lookup('.google.spanner.admin.database.v1.Backup');
        const createBackupMetadata = protoFilesRoot.lookup('.google.spanner.admin.database.v1.CreateBackupMetadata');
        const copyBackupResponse = protoFilesRoot.lookup('.google.spanner.admin.database.v1.Backup');
        const copyBackupMetadata = protoFilesRoot.lookup('.google.spanner.admin.database.v1.CopyBackupMetadata');
        const restoreDatabaseResponse = protoFilesRoot.lookup('.google.spanner.admin.database.v1.Database');
        const restoreDatabaseMetadata = protoFilesRoot.lookup('.google.spanner.admin.database.v1.RestoreDatabaseMetadata');
        this.descriptors.longrunning = {
            createDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createDatabaseResponse.decode.bind(createDatabaseResponse), createDatabaseMetadata.decode.bind(createDatabaseMetadata)),
            updateDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDatabaseResponse.decode.bind(updateDatabaseResponse), updateDatabaseMetadata.decode.bind(updateDatabaseMetadata)),
            updateDatabaseDdl: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDatabaseDdlResponse.decode.bind(updateDatabaseDdlResponse), updateDatabaseDdlMetadata.decode.bind(updateDatabaseDdlMetadata)),
            createBackup: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createBackupResponse.decode.bind(createBackupResponse), createBackupMetadata.decode.bind(createBackupMetadata)),
            copyBackup: new this._gaxModule.LongrunningDescriptor(this.operationsClient, copyBackupResponse.decode.bind(copyBackupResponse), copyBackupMetadata.decode.bind(copyBackupMetadata)),
            restoreDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, restoreDatabaseResponse.decode.bind(restoreDatabaseResponse), restoreDatabaseMetadata.decode.bind(restoreDatabaseMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.spanner.admin.database.v1.DatabaseAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.databaseAdminStub) {
            return this.databaseAdminStub;
        }
        // Put together the "service stub" for
        // google.spanner.admin.database.v1.DatabaseAdmin.
        this.databaseAdminStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.spanner.admin.database.v1.DatabaseAdmin')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.spanner.admin.database.v1.DatabaseAdmin, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const databaseAdminStubMethods = [
            'listDatabases',
            'createDatabase',
            'getDatabase',
            'updateDatabase',
            'updateDatabaseDdl',
            'dropDatabase',
            'getDatabaseDdl',
            'setIamPolicy',
            'getIamPolicy',
            'testIamPermissions',
            'createBackup',
            'copyBackup',
            'getBackup',
            'updateBackup',
            'deleteBackup',
            'listBackups',
            'restoreDatabase',
            'listDatabaseOperations',
            'listBackupOperations',
            'listDatabaseRoles',
            'addSplitPoints',
            'createBackupSchedule',
            'getBackupSchedule',
            'updateBackupSchedule',
            'deleteBackupSchedule',
            'listBackupSchedules',
        ];
        for (const methodName of databaseAdminStubMethods) {
            const callPromise = this.databaseAdminStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.databaseAdminStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'spanner.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'spanner.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/spanner.admin',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getDatabase(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDatabase(request, options, callback);
    }
    dropDatabase(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.dropDatabase(request, options, callback);
    }
    getDatabaseDdl(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDatabaseDdl(request, options, callback);
    }
    setIamPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
    }
    getIamPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
    }
    testIamPermissions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
    }
    getBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getBackup(request, options, callback);
    }
    updateBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'backup.name': (_a = request.backup.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateBackup(request, options, callback);
    }
    deleteBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteBackup(request, options, callback);
    }
    addSplitPoints(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.addSplitPoints(request, options, callback);
    }
    createBackupSchedule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createBackupSchedule(request, options, callback);
    }
    getBackupSchedule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getBackupSchedule(request, options, callback);
    }
    updateBackupSchedule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'backup_schedule.name': (_a = request.backupSchedule.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateBackupSchedule(request, options, callback);
    }
    deleteBackupSchedule(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteBackupSchedule(request, options, callback);
    }
    createDatabase(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDatabase(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createDatabase()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     */
    async checkCreateDatabaseProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDatabase, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateDatabase(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'database.name': (_a = request.database.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDatabase(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateDatabase()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     */
    async checkUpdateDatabaseProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDatabase, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateDatabaseDdl(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDatabaseDdl(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateDatabaseDdl()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     */
    async checkUpdateDatabaseDdlProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDatabaseDdl, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createBackup(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     */
    async checkCreateBackupProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createBackup, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    copyBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.copyBackup(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `copyBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     */
    async checkCopyBackupProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.copyBackup, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    restoreDatabase(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.restoreDatabase(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `restoreDatabase()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     */
    async checkRestoreDatabaseProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restoreDatabase, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listDatabases(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDatabases(request, options, callback);
    }
    /**
     * Equivalent to `listDatabases`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance whose databases should be listed.
     *   Values are of the form `projects/<project>/instances/<instance>`.
     * @param {number} request.pageSize
     *   Number of databases to be returned in the response. If 0 or less,
     *   defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListDatabasesResponse|ListDatabasesResponse}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.spanner.admin.database.v1.Database|Database} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDatabasesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDatabasesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatabases'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatabases.createStream(this.innerApiCalls.listDatabases, request, callSettings);
    }
    /**
     * Equivalent to `listDatabases`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance whose databases should be listed.
     *   Values are of the form `projects/<project>/instances/<instance>`.
     * @param {number} request.pageSize
     *   Number of databases to be returned in the response. If 0 or less,
     *   defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListDatabasesResponse|ListDatabasesResponse}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.spanner.admin.database.v1.Database|Database}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDatabasesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatabases'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatabases.asyncIterate(this.innerApiCalls['listDatabases'], request, callSettings);
    }
    listBackups(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listBackups(request, options, callback);
    }
    /**
     * Equivalent to `listBackups`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance to list backups from.  Values are of the
     *   form `projects/<project>/instances/<instance>`.
     * @param {string} request.filter
     *   An expression that filters the list of returned backups.
     *
     *   A filter expression consists of a field name, a comparison operator, and a
     *   value for filtering.
     *   The value must be a string, a number, or a boolean. The comparison operator
     *   must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
     *   Colon `:` is the contains operator. Filter rules are not case sensitive.
     *
     *   The following fields in the
     *   {@link protos.google.spanner.admin.database.v1.Backup|Backup} are eligible for
     *   filtering:
     *
     *     * `name`
     *     * `database`
     *     * `state`
     *     * `create_time`  (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `expire_time`  (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `version_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `size_bytes`
     *     * `backup_schedules`
     *
     *   You can combine multiple expressions by enclosing each expression in
     *   parentheses. By default, expressions are combined with AND logic, but
     *   you can specify AND, OR, and NOT logic explicitly.
     *
     *   Here are a few examples:
     *
     *     * `name:Howl` - The backup's name contains the string "howl".
     *     * `database:prod`
     *            - The database's name contains the string "prod".
     *     * `state:CREATING` - The backup is pending creation.
     *     * `state:READY` - The backup is fully created and ready for use.
     *     * `(name:howl) AND (create_time < \"2018-03-28T14:50:00Z\")`
     *            - The backup name contains the string "howl" and `create_time`
     *                of the backup is before 2018-03-28T14:50:00Z.
     *     * `expire_time < \"2018-03-28T14:50:00Z\"`
     *            - The backup `expire_time` is before 2018-03-28T14:50:00Z.
     *     * `size_bytes > 10000000000` - The backup's size is greater than 10GB
     *     * `backup_schedules:daily`
     *            - The backup is created from a schedule with "daily" in its name.
     * @param {number} request.pageSize
     *   Number of backups to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListBackupsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListBackupsResponse|ListBackupsResponse}
     *   to the same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.spanner.admin.database.v1.Backup|Backup} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackups.createStream(this.innerApiCalls.listBackups, request, callSettings);
    }
    /**
     * Equivalent to `listBackups`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance to list backups from.  Values are of the
     *   form `projects/<project>/instances/<instance>`.
     * @param {string} request.filter
     *   An expression that filters the list of returned backups.
     *
     *   A filter expression consists of a field name, a comparison operator, and a
     *   value for filtering.
     *   The value must be a string, a number, or a boolean. The comparison operator
     *   must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
     *   Colon `:` is the contains operator. Filter rules are not case sensitive.
     *
     *   The following fields in the
     *   {@link protos.google.spanner.admin.database.v1.Backup|Backup} are eligible for
     *   filtering:
     *
     *     * `name`
     *     * `database`
     *     * `state`
     *     * `create_time`  (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `expire_time`  (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `version_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *     * `size_bytes`
     *     * `backup_schedules`
     *
     *   You can combine multiple expressions by enclosing each expression in
     *   parentheses. By default, expressions are combined with AND logic, but
     *   you can specify AND, OR, and NOT logic explicitly.
     *
     *   Here are a few examples:
     *
     *     * `name:Howl` - The backup's name contains the string "howl".
     *     * `database:prod`
     *            - The database's name contains the string "prod".
     *     * `state:CREATING` - The backup is pending creation.
     *     * `state:READY` - The backup is fully created and ready for use.
     *     * `(name:howl) AND (create_time < \"2018-03-28T14:50:00Z\")`
     *            - The backup name contains the string "howl" and `create_time`
     *                of the backup is before 2018-03-28T14:50:00Z.
     *     * `expire_time < \"2018-03-28T14:50:00Z\"`
     *            - The backup `expire_time` is before 2018-03-28T14:50:00Z.
     *     * `size_bytes > 10000000000` - The backup's size is greater than 10GB
     *     * `backup_schedules:daily`
     *            - The backup is created from a schedule with "daily" in its name.
     * @param {number} request.pageSize
     *   Number of backups to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListBackupsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListBackupsResponse|ListBackupsResponse}
     *   to the same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.spanner.admin.database.v1.Backup|Backup}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackups.asyncIterate(this.innerApiCalls['listBackups'], request, callSettings);
    }
    listDatabaseOperations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDatabaseOperations(request, options, callback);
    }
    /**
     * Equivalent to `listDatabaseOperations`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance of the database operations.
     *   Values are of the form `projects/<project>/instances/<instance>`.
     * @param {string} request.filter
     *   An expression that filters the list of returned operations.
     *
     *   A filter expression consists of a field name, a
     *   comparison operator, and a value for filtering.
     *   The value must be a string, a number, or a boolean. The comparison operator
     *   must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
     *   Colon `:` is the contains operator. Filter rules are not case sensitive.
     *
     *   The following fields in the {@link protos.google.longrunning.Operation|Operation}
     *   are eligible for filtering:
     *
     *     * `name` - The name of the long-running operation
     *     * `done` - False if the operation is in progress, else true.
     *     * `metadata.@type` - the type of metadata. For example, the type string
     *        for
     *        {@link protos.google.spanner.admin.database.v1.RestoreDatabaseMetadata|RestoreDatabaseMetadata}
     *        is
     *        `type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata`.
     *     * `metadata.<field_name>` - any field in metadata.value.
     *        `metadata.@type` must be specified first, if filtering on metadata
     *        fields.
     *     * `error` - Error associated with the long-running operation.
     *     * `response.@type` - the type of response.
     *     * `response.<field_name>` - any field in response.value.
     *
     *   You can combine multiple expressions by enclosing each expression in
     *   parentheses. By default, expressions are combined with AND logic. However,
     *   you can specify AND, OR, and NOT logic explicitly.
     *
     *   Here are a few examples:
     *
     *     * `done:true` - The operation is complete.
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata) AND` \
     *       `(metadata.source_type:BACKUP) AND` \
     *       `(metadata.backup_info.backup:backup_howl) AND` \
     *       `(metadata.name:restored_howl) AND` \
     *       `(metadata.progress.start_time < \"2018-03-28T14:50:00Z\") AND` \
     *       `(error:*)` - Return operations where:
     *       * The operation's metadata type is
     *       {@link protos.google.spanner.admin.database.v1.RestoreDatabaseMetadata|RestoreDatabaseMetadata}.
     *       * The database is restored from a backup.
     *       * The backup name contains "backup_howl".
     *       * The restored database's name contains "restored_howl".
     *       * The operation started before 2018-03-28T14:50:00Z.
     *       * The operation resulted in an error.
     * @param {number} request.pageSize
     *   Number of operations to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseOperationsResponse|ListDatabaseOperationsResponse}
     *   to the same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.longrunning.Operation|Operation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDatabaseOperationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDatabaseOperationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatabaseOperations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatabaseOperations.createStream(this.innerApiCalls.listDatabaseOperations, request, callSettings);
    }
    /**
     * Equivalent to `listDatabaseOperations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance of the database operations.
     *   Values are of the form `projects/<project>/instances/<instance>`.
     * @param {string} request.filter
     *   An expression that filters the list of returned operations.
     *
     *   A filter expression consists of a field name, a
     *   comparison operator, and a value for filtering.
     *   The value must be a string, a number, or a boolean. The comparison operator
     *   must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
     *   Colon `:` is the contains operator. Filter rules are not case sensitive.
     *
     *   The following fields in the {@link protos.google.longrunning.Operation|Operation}
     *   are eligible for filtering:
     *
     *     * `name` - The name of the long-running operation
     *     * `done` - False if the operation is in progress, else true.
     *     * `metadata.@type` - the type of metadata. For example, the type string
     *        for
     *        {@link protos.google.spanner.admin.database.v1.RestoreDatabaseMetadata|RestoreDatabaseMetadata}
     *        is
     *        `type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata`.
     *     * `metadata.<field_name>` - any field in metadata.value.
     *        `metadata.@type` must be specified first, if filtering on metadata
     *        fields.
     *     * `error` - Error associated with the long-running operation.
     *     * `response.@type` - the type of response.
     *     * `response.<field_name>` - any field in response.value.
     *
     *   You can combine multiple expressions by enclosing each expression in
     *   parentheses. By default, expressions are combined with AND logic. However,
     *   you can specify AND, OR, and NOT logic explicitly.
     *
     *   Here are a few examples:
     *
     *     * `done:true` - The operation is complete.
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata) AND` \
     *       `(metadata.source_type:BACKUP) AND` \
     *       `(metadata.backup_info.backup:backup_howl) AND` \
     *       `(metadata.name:restored_howl) AND` \
     *       `(metadata.progress.start_time < \"2018-03-28T14:50:00Z\") AND` \
     *       `(error:*)` - Return operations where:
     *       * The operation's metadata type is
     *       {@link protos.google.spanner.admin.database.v1.RestoreDatabaseMetadata|RestoreDatabaseMetadata}.
     *       * The database is restored from a backup.
     *       * The backup name contains "backup_howl".
     *       * The restored database's name contains "restored_howl".
     *       * The operation started before 2018-03-28T14:50:00Z.
     *       * The operation resulted in an error.
     * @param {number} request.pageSize
     *   Number of operations to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseOperationsResponse|ListDatabaseOperationsResponse}
     *   to the same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.longrunning.Operation|Operation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDatabaseOperationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatabaseOperations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatabaseOperations.asyncIterate(this.innerApiCalls['listDatabaseOperations'], request, callSettings);
    }
    listBackupOperations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listBackupOperations(request, options, callback);
    }
    /**
     * Equivalent to `listBackupOperations`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance of the backup operations. Values are of
     *   the form `projects/<project>/instances/<instance>`.
     * @param {string} request.filter
     *   An expression that filters the list of returned backup operations.
     *
     *   A filter expression consists of a field name, a
     *   comparison operator, and a value for filtering.
     *   The value must be a string, a number, or a boolean. The comparison operator
     *   must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
     *   Colon `:` is the contains operator. Filter rules are not case sensitive.
     *
     *   The following fields in the {@link protos.google.longrunning.Operation|operation}
     *   are eligible for filtering:
     *
     *     * `name` - The name of the long-running operation
     *     * `done` - False if the operation is in progress, else true.
     *     * `metadata.@type` - the type of metadata. For example, the type string
     *        for
     *        {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}
     *        is
     *        `type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata`.
     *     * `metadata.<field_name>` - any field in metadata.value.
     *        `metadata.@type` must be specified first if filtering on metadata
     *        fields.
     *     * `error` - Error associated with the long-running operation.
     *     * `response.@type` - the type of response.
     *     * `response.<field_name>` - any field in response.value.
     *
     *   You can combine multiple expressions by enclosing each expression in
     *   parentheses. By default, expressions are combined with AND logic, but
     *   you can specify AND, OR, and NOT logic explicitly.
     *
     *   Here are a few examples:
     *
     *     * `done:true` - The operation is complete.
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata) AND` \
     *        `metadata.database:prod` - Returns operations where:
     *        * The operation's metadata type is
     *        {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}.
     *        * The source database name of backup contains the string "prod".
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata) AND` \
     *       `(metadata.name:howl) AND` \
     *       `(metadata.progress.start_time < \"2018-03-28T14:50:00Z\") AND` \
     *       `(error:*)` - Returns operations where:
     *       * The operation's metadata type is
     *       {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}.
     *       * The backup name contains the string "howl".
     *       * The operation started before 2018-03-28T14:50:00Z.
     *       * The operation resulted in an error.
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CopyBackupMetadata) AND` \
     *       `(metadata.source_backup:test) AND` \
     *       `(metadata.progress.start_time < \"2022-01-18T14:50:00Z\") AND` \
     *       `(error:*)` - Returns operations where:
     *       * The operation's metadata type is
     *       {@link protos.google.spanner.admin.database.v1.CopyBackupMetadata|CopyBackupMetadata}.
     *       * The source backup name contains the string "test".
     *       * The operation started before 2022-01-18T14:50:00Z.
     *       * The operation resulted in an error.
     *     * `((metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata) AND` \
     *       `(metadata.database:test_db)) OR` \
     *       `((metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CopyBackupMetadata)
     *       AND` \
     *       `(metadata.source_backup:test_bkp)) AND` \
     *       `(error:*)` - Returns operations where:
     *       * The operation's metadata matches either of criteria:
     *         * The operation's metadata type is
     *         {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}
     *         AND the source database name of the backup contains the string
     *         "test_db"
     *         * The operation's metadata type is
     *         {@link protos.google.spanner.admin.database.v1.CopyBackupMetadata|CopyBackupMetadata}
     *         AND the source backup name contains the string "test_bkp"
     *       * The operation resulted in an error.
     * @param {number} request.pageSize
     *   Number of operations to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListBackupOperationsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListBackupOperationsResponse|ListBackupOperationsResponse}
     *   to the same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.longrunning.Operation|Operation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBackupOperationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupOperationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackupOperations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackupOperations.createStream(this.innerApiCalls.listBackupOperations, request, callSettings);
    }
    /**
     * Equivalent to `listBackupOperations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance of the backup operations. Values are of
     *   the form `projects/<project>/instances/<instance>`.
     * @param {string} request.filter
     *   An expression that filters the list of returned backup operations.
     *
     *   A filter expression consists of a field name, a
     *   comparison operator, and a value for filtering.
     *   The value must be a string, a number, or a boolean. The comparison operator
     *   must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
     *   Colon `:` is the contains operator. Filter rules are not case sensitive.
     *
     *   The following fields in the {@link protos.google.longrunning.Operation|operation}
     *   are eligible for filtering:
     *
     *     * `name` - The name of the long-running operation
     *     * `done` - False if the operation is in progress, else true.
     *     * `metadata.@type` - the type of metadata. For example, the type string
     *        for
     *        {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}
     *        is
     *        `type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata`.
     *     * `metadata.<field_name>` - any field in metadata.value.
     *        `metadata.@type` must be specified first if filtering on metadata
     *        fields.
     *     * `error` - Error associated with the long-running operation.
     *     * `response.@type` - the type of response.
     *     * `response.<field_name>` - any field in response.value.
     *
     *   You can combine multiple expressions by enclosing each expression in
     *   parentheses. By default, expressions are combined with AND logic, but
     *   you can specify AND, OR, and NOT logic explicitly.
     *
     *   Here are a few examples:
     *
     *     * `done:true` - The operation is complete.
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata) AND` \
     *        `metadata.database:prod` - Returns operations where:
     *        * The operation's metadata type is
     *        {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}.
     *        * The source database name of backup contains the string "prod".
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata) AND` \
     *       `(metadata.name:howl) AND` \
     *       `(metadata.progress.start_time < \"2018-03-28T14:50:00Z\") AND` \
     *       `(error:*)` - Returns operations where:
     *       * The operation's metadata type is
     *       {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}.
     *       * The backup name contains the string "howl".
     *       * The operation started before 2018-03-28T14:50:00Z.
     *       * The operation resulted in an error.
     *     * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CopyBackupMetadata) AND` \
     *       `(metadata.source_backup:test) AND` \
     *       `(metadata.progress.start_time < \"2022-01-18T14:50:00Z\") AND` \
     *       `(error:*)` - Returns operations where:
     *       * The operation's metadata type is
     *       {@link protos.google.spanner.admin.database.v1.CopyBackupMetadata|CopyBackupMetadata}.
     *       * The source backup name contains the string "test".
     *       * The operation started before 2022-01-18T14:50:00Z.
     *       * The operation resulted in an error.
     *     * `((metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CreateBackupMetadata) AND` \
     *       `(metadata.database:test_db)) OR` \
     *       `((metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.CopyBackupMetadata)
     *       AND` \
     *       `(metadata.source_backup:test_bkp)) AND` \
     *       `(error:*)` - Returns operations where:
     *       * The operation's metadata matches either of criteria:
     *         * The operation's metadata type is
     *         {@link protos.google.spanner.admin.database.v1.CreateBackupMetadata|CreateBackupMetadata}
     *         AND the source database name of the backup contains the string
     *         "test_db"
     *         * The operation's metadata type is
     *         {@link protos.google.spanner.admin.database.v1.CopyBackupMetadata|CopyBackupMetadata}
     *         AND the source backup name contains the string "test_bkp"
     *       * The operation resulted in an error.
     * @param {number} request.pageSize
     *   Number of operations to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListBackupOperationsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListBackupOperationsResponse|ListBackupOperationsResponse}
     *   to the same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.longrunning.Operation|Operation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupOperationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackupOperations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackupOperations.asyncIterate(this.innerApiCalls['listBackupOperations'], request, callSettings);
    }
    listDatabaseRoles(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDatabaseRoles(request, options, callback);
    }
    /**
     * Equivalent to `listDatabaseRoles`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The database whose roles should be listed.
     *   Values are of the form
     *   `projects/<project>/instances/<instance>/databases/<database>`.
     * @param {number} request.pageSize
     *   Number of database roles to be returned in the response. If 0 or less,
     *   defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseRolesResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseRolesResponse|ListDatabaseRolesResponse}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.spanner.admin.database.v1.DatabaseRole|DatabaseRole} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDatabaseRolesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDatabaseRolesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatabaseRoles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatabaseRoles.createStream(this.innerApiCalls.listDatabaseRoles, request, callSettings);
    }
    /**
     * Equivalent to `listDatabaseRoles`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The database whose roles should be listed.
     *   Values are of the form
     *   `projects/<project>/instances/<instance>/databases/<database>`.
     * @param {number} request.pageSize
     *   Number of database roles to be returned in the response. If 0 or less,
     *   defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseRolesResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListDatabaseRolesResponse|ListDatabaseRolesResponse}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.spanner.admin.database.v1.DatabaseRole|DatabaseRole}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDatabaseRolesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDatabaseRoles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDatabaseRoles.asyncIterate(this.innerApiCalls['listDatabaseRoles'], request, callSettings);
    }
    listBackupSchedules(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listBackupSchedules(request, options, callback);
    }
    /**
     * Equivalent to `listBackupSchedules`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Database is the parent resource whose backup schedules should be
     *   listed. Values are of the form
     *   projects/<project>/instances/<instance>/databases/<database>
     * @param {number} [request.pageSize]
     *   Optional. Number of backup schedules to be returned in the response. If 0
     *   or less, defaults to the server's maximum allowed page size.
     * @param {string} [request.pageToken]
     *   Optional. If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListBackupSchedulesResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListBackupSchedulesResponse|ListBackupSchedulesResponse}
     *   to the same `parent`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.spanner.admin.database.v1.BackupSchedule|BackupSchedule} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBackupSchedulesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupSchedulesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackupSchedules'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackupSchedules.createStream(this.innerApiCalls.listBackupSchedules, request, callSettings);
    }
    /**
     * Equivalent to `listBackupSchedules`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Database is the parent resource whose backup schedules should be
     *   listed. Values are of the form
     *   projects/<project>/instances/<instance>/databases/<database>
     * @param {number} [request.pageSize]
     *   Optional. Number of backup schedules to be returned in the response. If 0
     *   or less, defaults to the server's maximum allowed page size.
     * @param {string} [request.pageToken]
     *   Optional. If non-empty, `page_token` should contain a
     *   {@link protos.google.spanner.admin.database.v1.ListBackupSchedulesResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.spanner.admin.database.v1.ListBackupSchedulesResponse|ListBackupSchedulesResponse}
     *   to the same `parent`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.spanner.admin.database.v1.BackupSchedule|BackupSchedule}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupSchedulesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackupSchedules'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackupSchedules.asyncIterate(this.innerApiCalls['listBackupSchedules'], request, callSettings);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, optionsOrCallback, callback) {
        var _a;
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        var _a;
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, optionsOrCallback, callback) {
        var _a;
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, optionsOrCallback, callback) {
        var _a;
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified backup resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} backup
     * @returns {string} Resource name string.
     */
    backupPath(project, instance, backup) {
        return this.pathTemplates.backupPathTemplate.render({
            project: project,
            instance: instance,
            backup: backup,
        });
    }
    /**
     * Parse the project from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).project;
    }
    /**
     * Parse the instance from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).instance;
    }
    /**
     * Parse the backup from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the backup.
     */
    matchBackupFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).backup;
    }
    /**
     * Return a fully-qualified backupSchedule resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} database
     * @param {string} schedule
     * @returns {string} Resource name string.
     */
    backupSchedulePath(project, instance, database, schedule) {
        return this.pathTemplates.backupSchedulePathTemplate.render({
            project: project,
            instance: instance,
            database: database,
            schedule: schedule,
        });
    }
    /**
     * Parse the project from BackupSchedule resource.
     *
     * @param {string} backupScheduleName
     *   A fully-qualified path representing BackupSchedule resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBackupScheduleName(backupScheduleName) {
        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).project;
    }
    /**
     * Parse the instance from BackupSchedule resource.
     *
     * @param {string} backupScheduleName
     *   A fully-qualified path representing BackupSchedule resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromBackupScheduleName(backupScheduleName) {
        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).instance;
    }
    /**
     * Parse the database from BackupSchedule resource.
     *
     * @param {string} backupScheduleName
     *   A fully-qualified path representing BackupSchedule resource.
     * @returns {string} A string representing the database.
     */
    matchDatabaseFromBackupScheduleName(backupScheduleName) {
        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).database;
    }
    /**
     * Parse the schedule from BackupSchedule resource.
     *
     * @param {string} backupScheduleName
     *   A fully-qualified path representing BackupSchedule resource.
     * @returns {string} A string representing the schedule.
     */
    matchScheduleFromBackupScheduleName(backupScheduleName) {
        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).schedule;
    }
    /**
     * Return a fully-qualified cryptoKey resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} key_ring
     * @param {string} crypto_key
     * @returns {string} Resource name string.
     */
    cryptoKeyPath(project, location, keyRing, cryptoKey) {
        return this.pathTemplates.cryptoKeyPathTemplate.render({
            project: project,
            location: location,
            key_ring: keyRing,
            crypto_key: cryptoKey,
        });
    }
    /**
     * Parse the project from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
            .project;
    }
    /**
     * Parse the location from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
            .location;
    }
    /**
     * Parse the key_ring from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the key_ring.
     */
    matchKeyRingFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
            .key_ring;
    }
    /**
     * Parse the crypto_key from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the crypto_key.
     */
    matchCryptoKeyFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
            .crypto_key;
    }
    /**
     * Return a fully-qualified database resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} database
     * @returns {string} Resource name string.
     */
    databasePath(project, instance, database) {
        return this.pathTemplates.databasePathTemplate.render({
            project: project,
            instance: instance,
            database: database,
        });
    }
    /**
     * Parse the project from Database resource.
     *
     * @param {string} databaseName
     *   A fully-qualified path representing Database resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDatabaseName(databaseName) {
        return this.pathTemplates.databasePathTemplate.match(databaseName).project;
    }
    /**
     * Parse the instance from Database resource.
     *
     * @param {string} databaseName
     *   A fully-qualified path representing Database resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromDatabaseName(databaseName) {
        return this.pathTemplates.databasePathTemplate.match(databaseName).instance;
    }
    /**
     * Parse the database from Database resource.
     *
     * @param {string} databaseName
     *   A fully-qualified path representing Database resource.
     * @returns {string} A string representing the database.
     */
    matchDatabaseFromDatabaseName(databaseName) {
        return this.pathTemplates.databasePathTemplate.match(databaseName).database;
    }
    /**
     * Return a fully-qualified databaseRole resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} database
     * @param {string} role
     * @returns {string} Resource name string.
     */
    databaseRolePath(project, instance, database, role) {
        return this.pathTemplates.databaseRolePathTemplate.render({
            project: project,
            instance: instance,
            database: database,
            role: role,
        });
    }
    /**
     * Parse the project from DatabaseRole resource.
     *
     * @param {string} databaseRoleName
     *   A fully-qualified path representing DatabaseRole resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDatabaseRoleName(databaseRoleName) {
        return this.pathTemplates.databaseRolePathTemplate.match(databaseRoleName)
            .project;
    }
    /**
     * Parse the instance from DatabaseRole resource.
     *
     * @param {string} databaseRoleName
     *   A fully-qualified path representing DatabaseRole resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromDatabaseRoleName(databaseRoleName) {
        return this.pathTemplates.databaseRolePathTemplate.match(databaseRoleName)
            .instance;
    }
    /**
     * Parse the database from DatabaseRole resource.
     *
     * @param {string} databaseRoleName
     *   A fully-qualified path representing DatabaseRole resource.
     * @returns {string} A string representing the database.
     */
    matchDatabaseFromDatabaseRoleName(databaseRoleName) {
        return this.pathTemplates.databaseRolePathTemplate.match(databaseRoleName)
            .database;
    }
    /**
     * Parse the role from DatabaseRole resource.
     *
     * @param {string} databaseRoleName
     *   A fully-qualified path representing DatabaseRole resource.
     * @returns {string} A string representing the role.
     */
    matchRoleFromDatabaseRoleName(databaseRoleName) {
        return this.pathTemplates.databaseRolePathTemplate.match(databaseRoleName)
            .role;
    }
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project, instance) {
        return this.pathTemplates.instancePathTemplate.render({
            project: project,
            instance: instance,
        });
    }
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).project;
    }
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.databaseAdminStub && !this._terminated) {
            return this.databaseAdminStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.DatabaseAdminClient = DatabaseAdminClient;
//# sourceMappingURL=database_admin_client.js.map